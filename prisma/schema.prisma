generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId       Int       @id @default(autoincrement()) @map("id")
  email        String    @unique
  name         String
  password     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  refreshToken String?   @db.Text
  lastLogin    DateTime?
  
  WorkspacesMembers WorkspacesMembers[]
  invitedByUserInvitations Invitations[] @relation("InvitedByUserRelation")
  invitedUserInvitations   Invitations[] @relation("InvitedUserRelation")
  
  @@map("Users")
}

model Workspaces {
  workspaceId    Int       @id @default(autoincrement()) @map("id")
  workspaceName  String    
  workspaceImage String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  ownerId        Int
  
  WorkspacesMembers WorkspacesMembers[]
  Boards            Boards[]
  Invitations       Invitations[]
  
  @@map("Workspaces")
}

model WorkspacesMembers {
  memberId    Int        @id @default(autoincrement()) @map("id")
  WorkspaceId Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  UserId      Int
  User        Users      @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  Workspaces  Workspaces @relation(fields: [WorkspaceId], references: [workspaceId], onDelete: Cascade)
  
  @@index([UserId], map: "WorkspacesMembers_UserId_fkey")
  @@index([WorkspaceId], map: "WorkspacesMembers_WorkspaceId_fkey")
  @@map("WorkspacesMembers")
}

model Boards {
  boardId     Int        @id @default(autoincrement()) @map("id")
  WorkspaceId Int
  boardName   String
  boardColor  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  colorId     Int    

  Columns    Columns[] 
  Color      Colors     @relation("BoardToColor", fields: [colorId], references: [colorId])
  Workspaces Workspaces @relation(fields: [WorkspaceId], references: [workspaceId], onDelete: Cascade)
  
  @@index([WorkspaceId], map: "Boards_WorkspaceId_fkey")
  @@map("Boards")
}

model Columns {
  columnId    Int       @id @default(autoincrement()) @map("id")
  BoardId     Int
  columnName  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  columnOrder Float
  Cards       Cards[]
  Boards      Boards    @relation(fields: [BoardId], references: [boardId], onDelete: Cascade)
  
  @@index([BoardId], map: "Columns_BoardId_fkey")
  @@map("Columns")
}

model Cards {
  cardId          Int       @id @default(autoincrement()) @map("id")
  cardName        String
  cardDescription String
  imageUrl        String?
  cardColor       String?
  worker          String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  cardOrder       Float
  dueDate         DateTime
  MemberId        Int
  ColumnId        Int
  colorId         Int       @unique
  
  Columns         Columns   @relation(fields: [ColumnId], references: [columnId], onDelete: Cascade)
  Color           Colors    @relation("CardToColor", fields: [colorId], references: [colorId])
  
  @@index([ColumnId], map: "Cards_ColumnId_fkey")
  @@map("Cards")
}

model Colors {
  colorId      Int     @id @default(autoincrement()) @map("id")
  startColor   String?  
  endColor     String? 
  backgroundUrl String?
  Boards       Boards[]  @relation("BoardToColor")
  Card         Cards?    @relation("CardToColor")
}

model Invitations {
  invitationId    Int        @id @default(autoincrement()) @map("id")
  WorkspaceId     Int
  InvitedUserId   Int
  InvitedByUserId Int
  accepted        Boolean?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  deletedAt       DateTime?
  
  InvitedByUser   Users      @relation("InvitedByUserRelation", fields: [InvitedByUserId], references: [userId], onDelete: Cascade)
  InvitedUser     Users      @relation("InvitedUserRelation", fields: [InvitedUserId], references: [userId], onDelete: Cascade)
  Workspace       Workspaces @relation(fields: [WorkspaceId], references: [workspaceId], onDelete: Cascade)
  
  @@index([InvitedByUserId], map: "Invitations_InvitedByUserId_fkey")
  @@index([InvitedUserId], map: "Invitations_InvitedUserId_fkey")
  @@index([WorkspaceId], map: "Invitations_WorkspaceId_fkey")
  @@map("Invitations")
}
